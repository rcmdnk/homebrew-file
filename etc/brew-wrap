#!/usr/bin/env bash
# brew command wrapper for brew-file
brew () {
  # Emulate ksh / local options if zsh
  [ -z "$ZSH_VERSION" ] || emulate -L ksh

  # Set exe
  local exe=("command" "brew")

  if ! type brew-file >/dev/null 2>&1;then
    "${exe[@]}" "$@"
    return
  fi
  # Do wrap
  # Check args
  local nargs=0
  local a
  for a in "$@";do
    if [[ ! "$a" =~ ^- ]];then
      ((nargs++))
    fi
  done
  local cmd=$1
  local cmd2=$2

  # No auto update for tap listing
  local env=""
  if [ "$cmd" = "tap" ] && [ $nargs -eq 1 ];then
    env="HOMEBREW_NO_AUTO_UPDATE=1"
  fi

  case "$cmd" in
    # brew file
    file)
      shift
      exe=("brew-file")
      ;;
    # brew install/uninstall/tap
    install|reinstall|tap|rm|remove|uninstall|untap)
      if [ $nargs -gt 1 ];then
        exe=("brew-file" "brew")
      fi
      ;;
    # brew cask install/uninstall
    cask)
      if ((nargs > 2)) && [[ "$cmd2" =~ ^(rm|remove|uninstall|install|instal)$ ]]; then
        exe=("brew-file" "brew")
      fi
      ;;
    *)
      if [[ " brew init dump set_repo set_local pull push clean clean_non_request casklist get_files version " =~ " $cmd " ]]; then
        exe=("brew-file")
      fi
      ;;
  esac

  # Remove noinit option for pure brew command
  if [ "${exe[*]}" = "command brew" ] &&  [ "$1" = "noinit" ];then
    shift
  fi

  # Execute command
  local brewfile
  if ! brewfile="$(brew-file cat)" 2>/dev/null;then
    brewfile=""
  fi
  $env "${exe[@]}" "$@"
  local ret=$?

  # Commands after brew command
  local brewfile_after
  if ! brewfile_after="$(brew-file cat)" 2>/dev/null;then
    brewfile_after=""
  fi
  if [ $ret -eq 0 ];then
    if ! command diff <(echo "$brewfile") <(echo "$brewfile_after") >/dev/null;then
      _post_brewfile_update
    fi
  fi

  return $ret
}

_post_brewfile_update () {
  :
}

# Wrap the brew command completion, to use the completion on `brew file`.
if ! type -a _brew >& /dev/null;then
  return
elif [ -z "$ZSH_VERSION" ] && ! type -a _brew_file >& /dev/null;then
  return
elif [ -n "$ZSH_VERSION" ];then
  if ! type -a _brew-file >& /dev/null;then
    return
  fi
  _brew-file
fi

_brew_completion_wrap () {
  if [ -n "$ZSH_VERSION" ];then
    local cword=$CURRENT
    local w
    w=("${words[@]}")
    local first=${w[2]}
  else
    local cword=$COMP_CWORD
    local w=("${COMP_WORDS[@]}")
    local first=${w[1]}
  fi

  local cur=${w[cword]}

  if [ "$first" = "file" ];then
    _brew_file "$@"
  else
    _brew
    if [ "$cword" -eq 1 ];then
      if [ -n "$ZSH_VERSION" ];then
        # Use longest brew's subcommand 'reinstall' to align with other brew commands.
        _values 'Subcommands' 'file[manage Brewfile]'
      else
        COMPREPLY=($(compgen -W "${COMPREPLY[*]} file" -- "$cur"))
      fi
    fi
  fi
}
if [ -n "$ZSH_VERSION" ];then
  compdef _brew_completion_wrap brew
else
  complete -o bashdefault -o default -F _brew_completion_wrap brew
fi

# mas command wrapper for brew-file
mas () {
  # Emulate ksh / local options if zsh
  [ -z "$ZSH_VERSION" ] || emulate -L ksh

  # Set exe
  exe=("command" "mas")

  # Do wrap
  if type brew-file >/dev/null 2>&1;then
    # Check args
    cmd=$1

    case "$cmd" in
      purchase|install|uninstall)
        exe=("brew-file" "brew" "mas")
        ;;
      *)
        ;;
    esac
  fi

  # Execute command
  "${exe[@]}" "$@"
}

# whalebrew command wrapper for brew-file
whalebrew () {
  # Emulate ksh / local options if zsh
  [ -z "$ZSH_VERSION" ] || emulate -L ksh

  # Set exe
  exe=("command" "whalebrew")

  # Do wrap
  if type brew-file >/dev/null 2>&1;then
    # Check args
    cmd=$1

    case "$cmd" in
      install|uninstall)
        exe=("brew-file" "brew" "whalebrew")
        ;;
      *)
        ;;
    esac
  fi

  # Execute command
  "${exe[@]}" "$@"
}

# code (for VSCode) command wrapper for brew-file
code () {
  # Emulate ksh / local options if zsh
  [ -z "$ZSH_VERSION" ] || emulate -L ksh

  # Set exe
  exe=("command" "code")

  # Do wrap
  if type brew-file >/dev/null 2>&1;then
    # Check args
    cmd=$1

    case "$cmd" in
      --install-extension|--uninstall-extension)
        exe=("brew-file" "brew" "code")
        ;;
      *)
        ;;
    esac
  fi

  # Execute command
  "${exe[@]}" "$@"
}
